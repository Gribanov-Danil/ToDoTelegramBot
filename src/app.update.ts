import { AppService } from "./app.service"
import { Ctx, Hears, InjectBot, Message, On, Start, Update } from "nestjs-telegraf"
import { Telegraf } from "telegraf"
import { actionButtons, deleteTask, editingTask, markCompletion, toDoList } from "./app.buttons"
import { Context } from "./context.interface"
import { getTaskList } from "./app.utils"

const todos = [
  {
    id: 1,
    name: "–ü–æ–º—ã—Ç—å –∫–æ—Ç–∞",
    isCompleted: false,
  },
  {
    id: 2,
    name: "–ü–æ–∫—É—à–∞—Ç—å",
    isCompleted: false,
  },
  {
    id: 3,
    name: "–ü–æ—Å–ø–∞—Ç—å",
    isCompleted: true,
  },
]
@Update()
export class AppUpdate {
  constructor(
    @InjectBot()
    private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
  ) {}

  @Start()
  async startCommand(context: Context) {
    await context.reply("–ü—Ä–∏–≤–µ—Ç, –±—Ä–∞—Ç üê∫")
    await context.reply("–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å, –±—Ä–∞—Ç?", actionButtons())
  }

  @Hears(toDoList)
  async getToDoList(context: Context) {
    await context.reply(getTaskList(todos))
  }

  @Hears(markCompletion)
  async setDoneTask(context: Context) {
    await context.reply("–ù–∞–ø–∏—à–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: ")
    context.session.type = "done"
  }
  @Hears(editingTask)
  async editTask(context: Context) {
    await context.deleteMessage()
    await context.replyWithHTML(
      "–ù–∞–ø–∏—à–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –∏ –µ—ë –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n" + "–í —Ñ–æ—Ä–º–∞—Ç–µ '<b>1 | –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>'",
    )
    context.session.type = "edit"
  }
  @Hears(deleteTask)
  async deleteTask(context: Context) {
    await context.reply("–ù–∞–ø–∏—à–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: ")
    context.session.type = "remove"
  }

  @On("text")
  async getMessage(@Message("text") message: string, @Ctx() context: Context) {
    if (!context.session.type) return
    if (context.session.type === "done") {
      const todo = todos.find((task) => task.id === Number(message))
      if (!todo) {
        await context.deleteMessage()
        await context.reply("–î–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID")
        return
      }
      todo.isCompleted = !todo.isCompleted
      await context.reply(getTaskList(todos))
    }
    if (context.session.type === "edit") {
      const [taskId, taskName] = message.split(" | ")
      const todo = todos.find((task) => task.id === Number(taskId))
      if (!todo) {
        await context.deleteMessage()
        await context.reply("–î–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID")
        return
      }
      todo.name = taskName
      await context.reply(getTaskList(todos))
    }
    if (context.session.type === "remove") {
      const todo = todos.find((task) => task.id === Number(message))
      if (!todo) {
        await context.deleteMessage()
        await context.reply("–î–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID")
        return
      }
      await context.reply(getTaskList(todos.filter((task) => task.id !== Number(message))))
    }
  }
}
